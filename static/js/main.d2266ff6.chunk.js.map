{"version":3,"sources":["Components/Quiz/QuizLanding.tsx","data/questions.js","Components/Question/QuestionForm.tsx","Components/Quiz/Quiz.tsx","Components/Resume/Resume.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["QuizState","questions","answer","correctAnswer","image","QuestionForm","props","state","question","e","preventDefault","this","setState","goToNextAnswer","value","target","className","onSubmit","AnswerQuestion","src","alt","height","type","name","placeholder","onChange","HandleInputChange","React","Component","Quiz","currentQuestion","index","length","Finish","onFinishQuiz","GoToNextQuestion","bind","onClick","GoToPreviousQuestion","disabled","Resume","callback","filter","item","scope","map","i","key","width","exitResume","QuizLanding","quizState","Welcome","randomItem","Math","floor","random","push","currentQuestions","startQuiz","resumeQuiz","goToWelcome","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2266ff6.chunk.js","sourcesContent":["import React from 'react';\nimport Question from '../Question/Question';\nimport Quiz from '../Quiz/Quiz';\nimport Resume from '../Resume/Resume';\n\nexport enum QuizState {\n    Welcome,\n    Quiz,\n    Resume\n}\n\nexport class QuizLanding extends React.Component<IQuizLandingProps, any>{\n\n    constructor(props: IQuizLandingProps) {\n        super(props);\n        this.state = {\n            quizState: QuizState.Welcome\n        }\n    }\n\n    goToWelcome(){\n        this.setState({\n            quizState: QuizState.Welcome\n        });\n    }\n\n    startQuiz(){\n        let questions = [];\n\n        for (let index = 0; index < 20; index++) {\n            let randomItem = this.props.questions[Math.floor(Math.random()*this.props.questions.length)];\n            questions.push(randomItem);\n        }\n\n        this.setState({\n            quizState: QuizState.Quiz,\n            currentQuestions: questions \n        });\n    }\n\n    resumeQuiz(){\n        this.setState({\n            quizState: QuizState.Resume\n        });\n    }\n\n    renderSwitch() {\n        switch (this.state.quizState) {\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                {(() => {\n                    switch(this.state.quizState) {\n                        case QuizState.Welcome:\n                            return (            \n                            <div className=\"mt-5\">\n                                    <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQDzi_C-hWDnfsBhSINaZAVXqo0ZzUHXf6brhnAiEEXStqToko7DA&s\" alt=\"app icon\"></img>\n                                    <h1 className=\"mt-3\">Welcome to Visu Opos Quiz</h1>\n                                    <button\n                                        className = \"btn btn-primary mt-3\" \n                                        onClick={this.startQuiz.bind(this)}>\n                                        Start\n                                    </button>\n                            </div>);\n                        case QuizState.Quiz:\n                            return <Quiz questions={this.state.currentQuestions} onFinishQuiz={this.resumeQuiz.bind(this)}></Quiz>;\n                        case QuizState.Resume:\n                            return <Resume questions={this.state.currentQuestions} callback={this.goToWelcome.bind(this)}></Resume>\n                                }\n                })()}\n            </div>\n        )\n    }\n}\n\ninterface IQuizLandingProps {\n    questions: Question[];\n}\n\ninterface IQuizLandingState {\n    quizState: QuizState;\n    currentQuestions: Question[];\n}\n\nexport default QuizLanding;","export const questions = [\n    {\n        answer: \"\",\n        correctAnswer: 'a',\n        image: 'https://helpx.adobe.com/content/dam/help/en/stock/how-to/visual-reverse-image-search/jcr_content/main-pars/image/visual-reverse-image-search-v2_intro.jpg'\n    },\n    {\n        answer: \"\",\n        correctAnswer: 'b',\n        image: 'https://images.unsplash.com/photo-1503023345310-bd7c1de61c7d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=401&q=80'\n    },\n    {\n        answer: \"\",\n        correctAnswer: 'c',\n        image: 'https://images.unsplash.com/photo-1511367461989-f85a21fda167?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=889&q=80'\n    },\n\n];\n\nexport default questions;","import React from 'react';\nimport Question from '../Question/Question';\n\nexport class QuestionForm extends React.Component<IQuestionFormProps,IQuestionFormState>{\n    \n    constructor(props: IQuestionFormProps){\n        super(props);\n        this.state = {\n            answer : props.question.answer\n        }\n    }\n    \n    AnswerQuestion(e: React.FormEvent<HTMLFormElement>){\n        e.preventDefault();\n\n        this.setState({\n            answer : ''\n        });\n\n        this.props.goToNextAnswer();\n    }\n\n    HandleInputChange(e: React.ChangeEvent<HTMLInputElement>){\n        e.preventDefault();\n        const {value} = e.target;\n        this.props.question.answer = value;\n        this.setState({\n            answer: value\n        })\n    }\n    render(){\n        return(\n            <div className=\"container\">\n                <div className=\"card card-body\">\n                    <form onSubmit={ e => this.AnswerQuestion(e)}>\n                        <div className=\"form-group\">\n                        <img src={this.props.question.image} alt=\"\" height=\"500px\"></img>\n\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"text\"\n                                name=\"answer\"\n                                placeholder=\"Answer\"\n                                className=\"form-control\"\n                                value={this.state.answer}\n                                onChange={e => this.HandleInputChange(e)}></input>\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button>\n                    </form>\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\ninterface IQuestionFormProps{\n    question: Question;\n    goToNextAnswer: () => any;\n}\n\ninterface IQuestionFormState{\n    answer:string;\n}\n\nexport default QuestionForm;","import React from 'react';\n\nimport QuestionForm from '../Question/QuestionForm';\nimport Question from '../Question/Question';\n\nexport class Quiz extends React.Component<IQuizProps, IQuizState>{\n\n    constructor(props: IQuizProps) {\n        super(props);\n\n        this.state = {\n            currentQuestion: props.questions[0],\n            index: 0\n        };\n    }\n\n    GoToNextQuestion() {\n        const index = this.state.index;\n        if (index + 1 < this.props.questions.length) {\n            this.setState({\n                currentQuestion: this.props.questions[index + 1],\n                index: index + 1\n            })\n        }\n        else {\n            this.Finish();\n        }\n    }\n\n    GoToPreviousQuestion() {\n        const index = this.state.index;\n        if (index - 1 >= 0) {\n\n            this.setState({\n                currentQuestion: this.props.questions[index - 1],\n                index: index - 1\n            })\n        }\n    }\n\n    Finish() {\n        this.props.onFinishQuiz();\n    }\n\n    render() {\n\n        return (\n            <div>\n                <QuestionForm question={this.state.currentQuestion} goToNextAnswer={this.GoToNextQuestion.bind(this)}></QuestionForm>\n                <div className=\"mt-3\">\n                    <button\n                        className=\"btn btn-primary mr-2\"\n                        onClick={this.GoToPreviousQuestion.bind(this)}\n                        disabled={this.state.index === 0}>\n                        Previous\n                        </button>\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={this.GoToNextQuestion.bind(this)}\n                        disabled={this.state.index === this.props.questions.length - 1}>\n                        Next\n                        </button>\n\n                    <button className=\"btn btn-success float-right\" onClick={this.Finish.bind(this)}>\n                        Finish\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\ninterface IQuizProps {\n    questions: Question[];\n    onFinishQuiz: () => any;\n}\n\ninterface IQuizState {\n    currentQuestion: Question;\n    index: number;\n}\n\nexport default Quiz;","import React from 'react';\nimport Question from '../Question/Question';\n\nexport class Resume extends React.Component<IResumeProps, any>{\n\n    exitResume(){\n        this.props.callback();\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h1>Quiz Resume</h1>\n\n        <h3>{this.props.questions.filter((item) => item.answer === item.correctAnswer).length} of {this.props.questions.length}</h3>\n                <table className=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Image</th>\n                            <th scope=\"col\">Answer</th>\n                            <th scope=\"col\">Correct Answer</th>\n                            <th scope=\"col\"></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.questions.map((item, i) =>\n                            <tr key={i}>\n                                <th scope=\"row\">{i+1}</th>\n                                <td><img width=\"100\" src={item.image} alt=\"\"/></td>\n                                <td>{item.answer}</td>\n                                <td>{item.correctAnswer}</td>\n                                <td>{item.correctAnswer === item.answer ? \n                                                                        <img src=\"https://www.freeiconspng.com/uploads/ok-icon-success-19.png\" alt=\"\" width=\"20\"></img> : \n                                                                        <img src=\"https://www.freeiconspng.com/uploads/error-icon-4.png\" alt=\"\" width=\"20\"></img>}</td>\n                            </tr>\n                        )}\n                    </tbody>\n                </table>\n                <button className=\"btn btn-primary\" onClick={this.exitResume.bind(this)}>Go back</button>\n            </div>\n        )\n    }\n}\n\ninterface IResumeProps {\n    questions: Question[];\n    callback: () => any;\n}\n\nexport default Resume;","import React from 'react';\nimport './App.css';\n\nimport { questions } from './data/questions'\nimport QuizLanding from './Components/Quiz/QuizLanding';\n\nconst App: React.FC = () => {\n  return (\n      <div className=\"App\">     \n        <QuizLanding questions={questions}></QuizLanding>  \n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}